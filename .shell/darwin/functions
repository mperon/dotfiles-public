#!/usr/bin/env bash
# vim: ts=4 sw=4 et ft=bash
# To the extent possible under law, the author(s) have dedicated all
# copyright and related and neighboring rights to this software to the
# public domain worldwide. This software is distributed without any warranty.
# You should have received a copy of the CC0 Public Domain Dedication along
# with this software.
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.

# base-files version 4.3-2

# ~/.config/settings/ubuntu/.bash_functions: executed by bash(1) for interactive shells.

################################
# DARWIN exclusive functions
################################

# Mac doesnt need open function. Has builtin
#open() {}

#Update All
update-darwin() {
    sudo softwareupdate -i -a
    brew update --auto-update
    brew upgrade
    brew upgrade --cask
    brew cleanup
    if [[ -d "$HOMEBREW_PREFIX/opt/ruby/bin" ]]; then
        $HOMEBREW_PREFIX/opt/ruby/bin/gem update
        $HOMEBREW_PREFIX/opt/ruby/bin/gem update --system
        $HOMEBREW_PREFIX/opt/ruby/bin/gem cleanup
    fi
    #fix-signatures
}

# reinstall application
#   reinstall packagename
reinstall() {
    brew reinstall "$@"
}

#list installed packages. Filter with parameters
#   installed [filter]
installed() {
    echo "not implemented!"
}

# Gets the BundleID com.app.* on mac
#   bundleid appName
bundleid() {
    osascript -e 'id of app "$1"'
}

#   -------------------------------
#   3. FILE AND FOLDER MANAGEMENT
#   -------------------------------
zipf() {
    /usr/bin/zip -x '*.DS_Store' -x '*__MACOSX*' \
        -x '*.AppleDouble*' \
        -r "${1/%\//}.zip" "${1}"
}

#   ---------------------------
#   5. PROCESS MANAGEMENT
#   ---------------------------

# findPid: find out the pid of a specified process
find-pid() {
    lsof -t -c "$@";
}

# my_ps: List processes owned by my user:
ps-user() {
    ps $@ -u $USER -o pid,%cpu,%mem,start,time,command
}


# Quit an app cleanly
quit() {
    for app in $*; do
        osascript -e 'quit app "'$app'"'
    done
}

# Man pages on preview
# pman command
pman () {
    mandoc -T pdf "$(/usr/bin/man -w $@)" | open -fa /System/Applications/Preview.app
}

# Relaunch an app
relaunch() {
    for app in $*; do
        osascript -e 'quit app "'$app'"';
        sleep 2;
        open -a $app
    done
}

# Dont Index this folder
# no-index [folder]
no-index() {
    local _p="${1:-$PWD}"
    [[ -f "${_p}/.metadata_never_index" ]] || touch "${_p}/.metadata_never_index"
}

# Dont Index this folder
# no-index-mdutil [folder]
no-index-mdutil() {
    local _p="${1:-$PWD}"
    [[ -d "${_p}" ]] && sudo mdutil -i off -d $_p \
        && sudo rm -r $_p/.Spotlight-V100/Store-V2/
}

############################
# Programming
############################
# Open Visual Studio Code
#  vscode
vscode() {
    # disables virtualenv
    [[ -n "$VIRTUAL_ENV" ]] && deactivate
    # runs vscode
    run /Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code "$@"
}

# THESE FIXES ARE REQUIRED BY PATCHED MACOS ONLY. DISABLED!
# # Fixes electron updates signature
# # electron-fix program
# electron-fix() {
#     [[ ! -f "$1" && ! -d "$1" ]] && echo "File doesn't exists" && return 1
#     xattr -lr "$1"
#     xattr -cr "$1"
#     sudo codesign -f -s - "$1"
# }

# # Fixes all electron updates signature
# # fix-signatures
# fix-signatures() {
#     electron-fix /Applications/Google\ Chrome.app
#     electron-fix /Applications/Visual\ Studio\ Code.app
#     electron-fix /Applications/Microsoft\ Teams.app
# }
