#!/usr/bin/env bash
#vim: ts=4 sw=4 et ft=sh

# import functions
source "${BASH_SOURCE%/*}/lib/bashFn.sh"

PROGRAMS=(gs pdftk enscript convert)
ACTION=

E_PDF_INPUT="ERROR: you need to pass an input file!"

__listRequiredPrograms() {
    __print "Required Programs To Run: "
    for prog in "${PROGRAMS[@]}"; do
        __print "  ${prog}"
    done
    __print "To install run $0 --install"
    __print "Thats All!"
}

__install_linux() {
    local ainst=""
    sudo apt-get -qq -y -f -m install ghostscript enscript \
        imagemagick qpdf poppler-utils pdftk
    return 0
}

__install_darwin() {
    brew install enscript qpdf imagemagick ghostscript
    return 0
}

__install_cygwin() {
    apt-cyg install enscript qpdf imagemagick ghostscript
}

__help_all() {
    cat <<EndOfText
Usage: pdf ACTION [action_options]
Utility to work easily with PDF files.
Example: pdf rotate input.pdf

For help of each action options, please call:
    >> pdf action --help

Avaliable modifiers:
  -h, --help     Help text

Avaliable actions:
EndOfText
    __list_actions

}

__help_read_fn() {
    local help_of="$1"
    help_desc= help_usage= help_example=
    while IFS='' read -r line || [[ -n "${line// }" ]]; do
        [[ "${line:0:1}" == "}" ]] && break
        if [[ "${line:0:6}" == "#:desc" ]]; then
            help_desc="${line:7}"
        elif [[ "${line:0:7}" == "#:usage" ]]; then
            help_usage="${line:8}"
        fi
    done < <(cat $0 | grep -A 5 "^__action_${help_of}(" | sed -e 's/^[ \t]*//')
}

__help_action() {
    local help_of="${1:-$ACTION}" get_out="${2}" desc="${3}"
    __help_read_fn "$help_of"
    [[ -n "${desc}" ]] && echo "${desc}"
    [[ -z "${desc}" ]] && echo "Utility to work easily with PDF files."
    echo ""
    echo "Action: ${help_of} - ${help_desc}"
    [[ -n "${help_usage// }" ]] && echo "Usage: ${help_usage}"
    [[ -n "${get_out}" ]] && exit "${get_out}"
}

__askConfirmation() {
    local _def="Você tem certeza?"
    local question="${1:-$_def}"
    local expect="${2:-Y}"
    local options="${3:-Y:n}"
    local optsin=":${options}:"
    local ret=
    while true; do
        read -p "$question [${options/:/\/}] " -r ret
        [[ "${ret// }" == "" ]] && ret=""
        if [[ "${optsin,,}" == *":${ret,,}:"* ]]; then
            [[ "${ret,,}" == "${expect,,}" ]] && return 0 || return 1
        fi
    done
}

__list_actions() {
    i=0
    while IFS='' read -r line || [[ -n "${line// }" ]]; do
        i=$((i+1))
        echo -n "| - $line"
        [[ "$(( $i % 3 ))" -eq 0  ]] && echo
    done < <(cat $0 | grep -Eo "^__action_([a-zA-Z0-9_-]+)" | sed 's/^__action_//') \
     | awk 1 | column -ts '|'
}

__askConfirmationOrCmd() {
    :
}

__askPassword() {
    unset PASS
    local _def="Enter Password"
    local prompt="${1:-$_def}: "
    local _pass=
    read -s -p "${prompt}" _pass
    echo
    [[ -n "${_pass// }" ]] && PASS="$_pass" && return 0 || return 1
}


__action_ls() {
    #:desc List all avaliable actions
    #:usage pdf ls
    __action_list "$@"
}

__action_list() {
    #:desc List all avaliable actions
    #:usage pdf list
    echo "Commands Avaliable:"
    __list_actions
}

#reduce size of pdf
#options are
# 	/screen – Lowest quality, lowest size
# 	/ebook – Moderate quality
# 	/printer – Good quality
# 	/prepress – Best quality, highest size
__action_reduce() {
    #:desc Reduce PDF file size
    #:usage pdf reduce input.pdf [output.pdf] [screen|ebook|printer|prepress]
    input="${1}"
    output="${2}"
    type="${3:-ebook}"

    [[ -z "${input}" ]] && __help_action $ACTION 4 "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}_reduced.pdf"

    gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 \
        -dPDFSETTINGS=/${type} -sOutputFile="$output" "$input"
}

__action_protect() {
    #:desc Password protect pdf
    #:usage pdf protect input.pdf [output.pdf]
    local _args=()
    local allow_print=""
    local input="${1}"
    local output="${2}"
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}_protected.pdf"

    echo "Protecting PDF File: $input"
    if __askConfirmation "Deseja setar senha dono?"; then
        if __askPassword "Set Owner Password"; then
            _args+=("owner_pw" "${PASS}")
        fi
    fi
    if __askConfirmation "Deseja setar senha usuario?"; then
        if __askPassword "Set User Password"; then
            _args+=("user_pw" "${PASS}")
        fi
    fi
    if __askConfirmation "Deseja permitir impressão do PDF?"; then
        _args+=("allow" "printing")
    fi

    pdftk "$input" cat output "$output" encrypt_128bit \
        "${_args[@]}"
}

__action_unprotect() {
    #:desc Remove password protect from pdf
    #:usage pdf protect input.pdf [output.pdf]

    local _args=()
    local input="${1}"
    local output="${2}"
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}_unprotected.pdf"

    if __askPassword "Informe a senha do arquivo"; then
        _args+=("input_pw" "A=${PASS}")
    else
        return 4
    fi

    pdftk "A=$input" "${_args[@]}" cat output "$output"
}


__action_unlock() {
    #:desc Unlock PDF file using some strategies
    #:usage pdf unlock input.pdf [output.pdf] [gs|qpdf|lp]
    local _qpdf= _lp= _gs=
    local input="${1}"
    local output="${2}"
    local strategy="${3:-gs}"
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}_unlocked.pdf"

    #check if is password protected
    if qpdf --requires-password "${input}"; then
        if __askPassword "Informe a senha do arquivo"; then
            _pwd+=("${PASS}")
            _qpdf="--password=\"${PASS}\""
            _gs="-sPDFPassword=\"${PASS}\""
        else
            echo "This file is password protected and you do not inform one!"
            return 4
        fi
    fi

    case "${strategy,,}" in
        qpdf)
            qpdf --decrypt "${input}" "${output}"
            ;;
        lp)
            lp -d "PDF" "${input}"
            ;;
        gs|*)
            gs -q -dNOPAUSE -dBATCH -r300 -sDEVICE=pdfwrite -sOutputFile=%stdout% \
                -c .setpdfwrite ${_gs} -f "${input}" > "${output}"
            ;;
    esac
}

__action_mark() {
    #:desc Watermark input file with Watermark
    #:usage pdf mark input.pdf [mark.pdf] [output.pdf] [pages_skip]
    local input="${1}" mark="${2}" output="${3}" skip_pages="${4:-0}"
    local n_pages= w_pages= w_pages= start_page=

    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -f "$input" ]] && echo "Input file not found!!" && return 4
    [[ ! -f "$mark" ]] && echo "Wartermark file not found!!" && return 4
    [[ -z "${output// }" ]] && output="${input%.pdf}_watermark.pdf"

    n_pages=$(qpdf "$input" --show-npages)
    w_pages=$(qpdf "$mark" --show-npages)
    r_pages=$(( $n_pages - $skip_pages ))

    if [[ "${r_pages:-0}" -gt 0 ]]; then
        start_page=$(( $skip_pages + 1 ))
        echo "Inserting Watermark from page $start_page to page ${r_pages}"
        qpdf "$input" --overlay "${mark}" --to=$start_page-${n_pages} --from=1 --repeat=1-$w_pages -- "${output}"
    else
        echo "No pages to stamp!! Skipping more than existing pages.."
        return 4
    fi
    echo "Done!"
    echo "Watermarked PDF at: ${output}"
    return 0
}



__action_sign() {
    #:desc Sign pdf using signature files
    #:usage pdf sign input.pdf [pages_skip] [output.pdf] [signature_folder]

    [[ ! -f "$1" ]] && echo "Input file not found!!" && return 4

    local input= output= rubricas= signatures= _args=()
    local npages= rpages= cfound= tmpf= sf= spage=
    input="${1}"
    pages_skip="${2:-1}"
    output="${3}"
    sf=${4:-}
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ -z "$sf" ]] && sf=$(readlinkf "$HOME/Pictures/Assinaturas digitais")
    if [[ -d "${sf}" ]]; then
        rubricas="${sf}/Rubricas.pdf"
        signatures="${sf}/Assinaturas.pdf"
    else
        echo "Signature folder ${sf} doesnt exists!!!"
        return 4
    fi
    [[ ! -f "${rubricas}" ]] && echo "Rubricas File not Found: ${rubricas}" && return 4
    [[ ! -f "${signatures}" ]] && echo "Signatures File not Found: ${signatures}" && return 4
    [[ -z "${output// }" ]] && output="${input%.pdf}_signed.pdf"

    npages=$(qpdf "$input" --show-npages)
    rpages=$(($npages-$pages_skip))
    spage=$(($rpages+1))
    if [[ "${npages:-0}" -gt 1 ]]; then
        echo "Inserting rubricas into file from page 1 to page ${rpages}"
        qpdf "$input" --overlay "${rubricas}" --to=1-${rpages} --from=1 --repeat=1 -- "${output}"
    fi
    # copy file to working
    [[ ! -f "${output}" ]] && cp "${input}" "${output}"

    # check if last page is page with only Encaminha-se
    # o presente and the signatures
    cfound=$(gs -dBATCH -dNOPAUSE -sDEVICE=txtwrite -dFirstPage=$spage -dLastPage=$spage -sOutputFile=- "${input}" | grep -E "Encaminha\-se\s+o\s+presente" | wc -l )
    if [[ "${cfound}" -gt 0 ]]; then
        # sign last page with full signatures
        echo "Inserting SIGNATURES onto page: ${spage}"
        qpdf "${output}" --replace-input --overlay "${signatures}" --to=${spage}-${spage} --from=1 --repeat=1 --
    fi
    #generate final file
    echo "Reducing PDF file size.."
    qpdf "${output}" --optimize-images --compress-streams=y --replace-input
    echo "Done!"
    echo "Signed PDF at: ${output}"
}


__action_rotate() {
    #:desc Rotate pdf file
    #:usage pdf rotate input.pdf [output.pdf] [+90|-90:1,2,3]

    local input="${1}"
    local output="${2}"
    local direction="${3:-+90}"

    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}"

    qpdf "$input" --rotate="$direction" -- "$output"
}

__action_cat() {
    #:desc Concat several pdf files
    #:usage pdf cat output.pdf [input1.pdf] [input2.pdf] [...]
    __action_concat "$@"
}


__action_page() {
    #:desc Extract page range from PDF
    #:usage pdf page input.pdf [1-5,2,3] [output.pdf]
    local input="${1}"
    local pages="${2}"
    local output="${3}"
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ -z "${pages}" ]] && __help_action $ACTION 4  "Second parameter must be page range"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}-${pages/,/-}.pdf"

    qpdf --empty --pages "${input}" "${pages}" -- "${output}"

    echo "Extracting pages ${pages} to file: ${output} .."
}


__action_concat() {
    #:desc Concat several pdf files
    #:usage pdf concat output.pdf [input1.pdf] [input2.pdf] [...]

    local output="${1}"
    [[ -z "${1}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="all.pdf"
    shift
    qpdf --empty --pages "$@" -- "${output}"
}

__action_numerate() {
    #:desc Concat several pdf files
    #:usage pdf concat output.pdf [input1.pdf] [input2.pdf] [...]

    input="$1"
    shift
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    output="${input%.pdf}-header.pdf"
    pagenum=$(pdftk "$input" dump_data | grep "NumberOfPages" | cut -d":" -f2)
    enscript -L1 -F Helvetica@9 --footer='||($% / $=)' --output - < <(for i in $(seq "$pagenum"); do echo; done) | ps2pdf - | pdftk "$input" multistamp - output "$output"
}

__action_num() {
    #:desc Numerate PDF File on Footer
    #:usage pdf num input [output.pdf] [header|footer] [color]
    local input="${1}" output="${2}" place="${3:-footer}" color=${4:-blue} npages= tmpf=
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}_numerated.pdf"
    if ! __ensure_enscript $color; then
        echo "Invalid color..."
        return 4
    fi

    tmpf=$(mktemp)
    npages=$(qpdf "$input" --show-npages)
#    enscript -L1 -F Helvetica@9 -f Helvetica@9 --fancy-header=footer -L1 -b'||' --footer '||($% / $=)' -o- \
    enscript -L1 -F Helvetica@9 -f Helvetica@9 --fancy-header=pdf_num --header='||' --footer="||\$%/\$=" -o- \
        < <(for i in $(seq $npages); do echo; done) | ps2pdf - \
        > "${tmpf}"

    qpdf "$input" --overlay "${tmpf}" --to=1-${npages} --from=1-${npages} -- "${output}"
    rm -f $tmpf
}

__action_num_folder() {
    #:desc numerate pdf and save in folder numerated/
    #:usage pdf num_folder input.pdf [output|output.pdf]

    input="$1"
    shift
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    output="numerated/${input}"
    [[ ! -d "numerated" ]] && mkdir numerated/
    pagenum=$(pdftk "$input" dump_data | grep "NumberOfPages" | cut -d":" -f2)
    enscript -L1 -F Helvetica@9 --header='||$% de $=' --output - < <(for i in $(seq "$pagenum"); do echo; done) | ps2pdf - | pdftk "$input" multistamp - output "$output"

}

__action_black_white() {
    #:desc convert pdf file to black and white only
    #:usage pdf black_white input.pdf [output.pdf] [threshold:80]

    local _args=()
    local input="${1}"
    local output="${2}"
    local threshold="${3:-80}"
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}_bw.pdf"
    convert -density 200 -threshold "${threshold}%" "$input" "$output"
}

__action_help() {
    local help_of=
    if [[ "$ACTION" == "help" ]]; then
        help_of="$1"
    else
        help_of="$ACTION"
    fi

    if [[ -z "$help_of" ]]; then
        #print help of all functions
        __help_all
    else
        __help_action "$help_of"
    fi
}

__action_txt() {
    #:desc extract text from pdf file
    #:usage pdf txt input.pdf [output.pdf]

    local input="${1}"
    local output="${2}"
    [[ -z "${input}" ]] && __help_action $ACTION 4  "$E_PDF_INPUT"
    [[ ! -n "${output// }" ]] && output="${input%.pdf}.txt"

    pdftotext "$input" "$output"
}


__ensure_enscript() {
    local NAMES=("black" "white" "red" "green" "blue")
    local COLORS=("0 0 0" "1 1 1" "1 0 0" "0 1 0" "0 0 1")
    local name="${1:-black}" rgb_color=

    for (( i=0; i < ${#NAMES[@]}; i++ )); do
        [[ "${name,,}" == "${NAMES[$i]}" ]] && rgb_color="${COLORS[$i]}" && break
    done

    if [[ -z "${rgb_color}" ]]; then
        return 4
    fi

    [[ ! -d ~/.enscript ]] && mkdir -p ~/.enscript

    cat <<EndOfConfig | tee ~/.enscript/pdf_num.hdr > /dev/null 2>&1
% -- code follows this line --
%Format: pagenumstr $V$%

%FooterHeight: 15

/do_header {   % print default simple header

  % Footer
  gsave
    d_footer_x d_footer_y HFpt_h 3 div add translate
    HF setfont

    user_footer_p {
      d_footer_x  d_footer_y moveto user_footer_left_str show

      d_footer_w user_footer_center_str stringwidth pop sub 2 div
      0 moveto user_footer_center_str show
      ${rgb_color} setrgbcolor
      /Arial-Bold findfont
      16 scalefont
      setfont
      d_footer_x d_footer_w add user_footer_right_str stringwidth pop sub
      d_footer_y moveto user_footer_right_str show
    } if
  grestore

} def
EndOfConfig

}


__main() {
    ACTION=$1
    shift
    if [[ -z "${ACTION// }" ]]; then
        __help_all
        return 4
    fi
    if [[ "$ACTION" == "-h" || "$ACTION" == "--help" ]]; then
        __help_all; return 4
    elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
        __action_help "$@"; return 4
    elif [[ "$ACTION" == "--install" ]]; then
        [[ -z "$MY_OS" ]] && MY_OS=$(uname -s | cut -d"_" -f1 | head -n 1 | tr '[:upper:]' '[:lower:]')
        __install_${MY_OS} "$@"; return $?
    fi

    if function_exists "__action_${ACTION}"; then
        "__action_${ACTION}" "$@"
        return $?
    else
        echo "Function $arg doesnt exists!"
        return 4
    fi
}

__main "$@"
