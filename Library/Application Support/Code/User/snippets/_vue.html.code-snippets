{
  "template": {
    "scope": "html",
    "prefix": "template",
    "body": [
      "<template>",
      "\t<${1:div}$2>",
      "\t\t$0",
      "\t</${1:div}>",
      "</template>"
    ],
    "description": "template element"
  },
  "v-text": {
    "scope": "html",
    "prefix": "vText",
    "body": ["v-text=\"${1:msg}\""],
    "description": "Expects: string. Updates the element’s textContent."
  },
  "v-html": {
    "scope": "html",
    "prefix": "vhtml",
    "body": ["v-html=\"${1:html}\""],
    "description": "Expects: string. Updates the element’s innerHTML."
  },
  "v-show": {
    "scope": "html",
    "prefix": "vshow",
    "body": ["v-show=\"${1:condition}\""],
    "description": "Expects: any"
  },
  "v-if": {
    "scope": "html",
    "prefix": "vif",
    "body": ["v-if=\"${1:condition}\""],
    "description": "Expects: any"
  },
  "v-else": {
    "scope": "html",
    "prefix": "velse",
    "body": ["v-else"],
    "description": "Does not expect expression. previous sibling element must have v-if or v-else-if."
  },
  "v-else-if": {
    "scope": "html",
    "prefix": "velseIf",
    "body": ["v-else-if=\"${1:condition}\""],
    "description": "Expects: any. previous sibling element must have v-if or v-else-if."
  },
  "v-for-without-key": {
    "scope": "html",
    "prefix": "vforWithoutKey",
    "body": ["v-for=\"${1:item} in ${2:items}\""],
    "description": "Expects: Array | Object | number | string"
  },
  "v-for": {
    "scope": "html",
    "prefix": "vfor",
    "body": [
      "v-for=\"(${1:item}, ${2:index}) in ${3:items}\" :key=\"${4:index}\""
    ],
    "description": "Expects: Array | Object | number | string"
  },
  "v-on": {
    "scope": "html",
    "prefix": "von",
    "body": ["v-on:${1:event}=\"${2:handle}\""],
    "description": "Expects: Function | Inline Statement"
  },
  "v-bind": {
    "scope": "html",
    "prefix": "vBind",
    "body": ["v-bind$1=\"${2}\""],
    "description": "Expects: any (with argument) | Object (without argument)"
  },
  "v-model": {
    "scope": "html",
    "prefix": "vModel",
    "body": ["v-model=\"${1:something}\""],
    "description": "Expects: varies based on value of form inputs element or output of components"
  },
  "v-pre": {
    "scope": "html",
    "prefix": "vPre",
    "body": ["v-pre"],
    "description": "Does not expect expression"
  },
  "v-cloak": {
    "scope": "html",
    "prefix": "vCloak",
    "body": ["v-cloak"],
    "description": "Does not expect expression"
  },
  "v-once": {
    "scope": "html",
    "prefix": "vonce",
    "body": ["v-once"],
    "description": "Does not expect expression"
  },
  "key": {
    "scope": "html",
    "prefix": "key",
    "body": [":key=\"${1:key}\""],
    "description": "Expects: string. Children of the same common parent must have unique keys. Duplicate keys will cause render errors."
  },
  "ref": {
    "scope": "html",
    "prefix": "ref",
    "body": ["ref=\"${1:reference}\"$0"],
    "description": "Expects: string. ref is used to register a reference to an element or a child component. The reference will be registered under the parent component’s $refs object. If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be component instance."
  },
  "slotA": {
    "scope": "html",
    "prefix": "slotA",
    "body": ["slot=\"$1\"$0"],
    "description": "slot=''. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotE": {
    "scope": "html",
    "prefix": "slotE",
    "body": ["<slot$1>$2</slot>$0"],
    "description": "<slot></slot>. Expects: string. Used on content inserted into child components to indicate which named slot the content belongs to."
  },
  "slotScope": {
    "scope": "html",
    "prefix": "slotScope",
    "body": ["slot-scope=\"$1\"$0"],
    "description": "Used to denote an element or component as a scoped slot. The attribute’s value should be a valid JavaScript expression that can appear in the argument position of a function signature. This means in supported environments you can also use ES2015 destructuring in the expression. Serves as a replacement for scope in 2.5.0+."
  },
  "scope": {
    "scope": "html",
    "prefix": "scope",
    "body": ["scope=\"${1:this api replaced by slot-scope in 2.5.0+}\"$0"],
    "description": "Used to denote a <template> element as a scoped slot, which is replaced by `slot-scope` in 2.5.0+."
  },
  "component": {
    "scope": "html",
    "prefix": "component",
    "body": ["<component :is=\"${1:componentId}\"></component>$0"],
    "description": "component element"
  },
  "keep-alive": {
    "scope": "html",
    "prefix": "keepAlive",
    "body": ["<keep-alive$1>", "$2", "</keep-alive>$0"],
    "description": "keep-alive element"
  },
  "transition": {
    "scope": "html",
    "prefix": "transition",
    "body": ["<transition$1>", "$2", "</transition>$0"],
    "description": "transition element"
  },
  "transition-group": {
    "scope": "html",
    "prefix": "transitionGroup",
    "body": ["<transition-group$1>", "$2", "</transition-group>"],
    "description": "transition-group element"
  },
  "enter-class": {
    "scope": "html",
    "prefix": "enterClass",
    "body": ["enter-class=\"$1\"$0"],
    "description": "enter-class=''. Expects: string."
  },
  "leave-class": {
    "scope": "html",
    "prefix": "leaveClass",
    "body": ["leave-class=\"$1\"$0"],
    "description": "leave-class=''. Expects: string."
  },
  "appear-class": {
    "scope": "html",
    "prefix": "appearClass",
    "body": ["appear-class=\"$1\"$0"],
    "description": "appear-class=''. Expects: string."
  },
  "enter-to-class": {
    "scope": "html",
    "prefix": "enterToClass",
    "body": ["enter-to-class=\"$1\"$0"],
    "description": "enter-to-class=''. Expects: string."
  },
  "leave-to-class": {
    "scope": "html",
    "prefix": "leaveToClass",
    "body": ["leave-to-class=\"$1\"$0"],
    "description": "leave-to-class=''. Expects: string."
  },
  "appear-to-class": {
    "scope": "html",
    "prefix": "appearToClass",
    "body": ["appear-to-class=\"$1\"$0"],
    "description": "appear-to-class=''. Expects: string."
  },
  "enter-active-class": {
    "scope": "html",
    "prefix": "enterActiveClass",
    "body": ["enter-active-class=\"$1\"$0"],
    "description": "enter-active-class=''. Expects: string."
  },
  "leave-active-class": {
    "scope": "html",
    "prefix": "leaveActiveClass",
    "body": ["leave-active-class=\"$1\"$0"],
    "description": "leave-active-class=''. Expects: string."
  },
  "appear-active-class": {
    "scope": "html",
    "prefix": "appearActiveClass",
    "body": ["appear-active-class=\"$1\"$0"],
    "description": "appear-active-class=''. Expects: string."
  },
  "before-enter": {
    "scope": "html",
    "prefix": "beforeEnterEvent",
    "body": ["@before-enter=\"$1\"$0"],
    "description": "@before-enter=''"
  },
  "before-leave": {
    "scope": "html",
    "prefix": "beforeLeaveEvent",
    "body": ["@before-leave=\"$1\"$0"],
    "description": "@before-leave=''"
  },
  "before-appear": {
    "scope": "html",
    "prefix": "beforeAppearEvent",
    "body": ["@before-appear=\"$1\"$0"],
    "description": "@before-appear=''"
  },
  "enter": {
    "scope": "html",
    "prefix": "enterEvent",
    "body": ["@enter=\"$1\"$0"],
    "description": "@enter=''"
  },
  "leave": {
    "scope": "html",
    "prefix": "leaveEvent",
    "body": ["@leave=\"$1\"$0"],
    "description": "@leave=''"
  },
  "appear": {
    "scope": "html",
    "prefix": "appearEvent",
    "body": ["@appear=\"$1\"$0"],
    "description": "@appear=''"
  },
  "after-enter": {
    "scope": "html",
    "prefix": "afterEnterEvent",
    "body": ["@after-enter=\"$1\"$0"],
    "description": "@after-enter=''"
  },
  "after-leave": {
    "scope": "html",
    "prefix": "afterLeaveEvent",
    "body": ["@after-leave=\"$1\"$0"],
    "description": "@after-leave=''"
  },
  "after-appear": {
    "scope": "html",
    "prefix": "afterAppearEvent",
    "body": ["@after-appear=\"$1\"$0"],
    "description": "@after-appear=''"
  },
  "enter-cancelled": {
    "scope": "html",
    "prefix": "enterCancelledEvent",
    "body": ["@enter-cancelled=\"$1\"$0"],
    "description": "@enter-cancelled=''"
  },
  "leave-cancelled": {
    "scope": "html",
    "prefix": "leaveCancelledEvent",
    "body": ["@leave-cancelled=\"$1\"$0"],
    "description": "@leave-cancelled='' (v-show only)"
  },
  "appear-cancelled": {
    "scope": "html",
    "prefix": "appearCancelledEvent",
    "body": ["@appear-cancelled=\"$1\"$0"],
    "description": "@appear-cancelled=''"
  },
  "routerLink": {
    "scope": "html",
    "prefix": "routerLink",
    "body": ["<router-link $1>$2</router-link>$0"],
    "description": "router-link element"
  },
  "routerLinkTo": {
    "scope": "html",
    "prefix": "routerLinkTo",
    "body": ["<router-link to=\"$1\">$2</router-link>$0"],
    "description": "<router-link to=''></router-link>. router-link element"
  },
  "to": {
    "scope": "html",
    "prefix": "vto",
    "body": ["to=\"$1\"$0"],
    "description": "to=''"
  },
  "tag": {
    "scope": "html",
    "prefix": "vtag",
    "body": ["tag=\"$1\"$0"],
    "description": "tag=''"
  },
  "routerView": {
    "scope": "html",
    "prefix": "routerView",
    "body": ["<router-view>$1</router-view>$0"],
    "description": "router-view element"
  }
}
